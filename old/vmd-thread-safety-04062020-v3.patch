Index: control.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/control.c,v
retrieving revision 1.30
diff -u -p -u -p -r1.30 control.c
--- control.c	4 Dec 2018 08:15:09 -0000	1.30
+++ control.c	4 Jun 2020 20:21:26 -0000
@@ -39,6 +39,8 @@
 
 #define	CONTROL_BACKLOG	5
 
+extern struct event_base *global_evbase;
+
 struct ctl_connlist ctl_conns;
 
 void
@@ -198,8 +200,10 @@ control_listen(struct control_sock *cs)
 
 	event_set(&cs->cs_ev, cs->cs_fd, EV_READ,
 	    control_accept, cs);
+	event_base_set(global_evbase, &cs->cs_ev);
 	event_add(&cs->cs_ev, NULL);
 	evtimer_set(&cs->cs_evt, control_accept, cs);
+	event_base_set(global_evbase, &cs->cs_evt);
 
 	return (0);
 }
@@ -256,6 +260,7 @@ control_accept(int listenfd, short event
 	c->iev.data = cs;
 	event_set(&c->iev.ev, c->iev.ibuf.fd, c->iev.events,
 	    c->iev.handler, c->iev.data);
+	event_base_set(global_evbase, &c->iev.ev);
 	event_add(&c->iev.ev, NULL);
 
 	TAILQ_INSERT_TAIL(&ctl_conns, c, entry);
Index: i8253.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/i8253.c,v
retrieving revision 1.31
diff -u -p -u -p -r1.31 i8253.c
--- i8253.c	30 Nov 2019 00:51:29 -0000	1.31
+++ i8253.c	4 Jun 2020 20:21:27 -0000
@@ -15,6 +15,7 @@
  * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
  */
 
+#include <sys/errno.h>
 #include <sys/time.h>
 #include <sys/types.h>
 
@@ -30,6 +31,7 @@
 
 #include "i8253.h"
 #include "proc.h"
+#include "vmd.h"
 #include "vmm.h"
 #include "atomicio.h"
 
@@ -43,6 +45,35 @@ extern char *__progname;
  */
 struct i8253_channel i8253_channel[3];
 
+extern struct event_base *global_evbase;
+
+static struct vm_dev_pipe dev_pipe;
+
+static void i8253_reset(struct i8253_channel *);
+static void i8253_delayed_reset(int, short, void*);
+
+/*
+ * i8253_pipe_handler
+ *
+ * Reads a channel number off the device pipe and resets it.
+ *
+ */
+static void
+i8253_pipe_dispatch(int fd, short event, void *arg)
+{
+	uint8_t chn;
+
+	mutex_lock(&dev_pipe.mutex);
+
+	read(fd, &chn, sizeof(chn));
+
+	log_debug("%s: resetting channel: %u", __func__, chn);
+	i8253_reset(&i8253_channel[chn]);
+
+	pthread_cond_signal(&dev_pipe.cond);
+	mutex_unlock(&dev_pipe.mutex);
+}
+
 /*
  * i8253_init
  *
@@ -75,8 +106,26 @@ i8253_init(uint32_t vm_id)
 	i8253_channel[2].state = 0;
 
 	evtimer_set(&i8253_channel[0].timer, i8253_fire, &i8253_channel[0]);
+	event_base_set(global_evbase, &i8253_channel[0].timer);
+
 	evtimer_set(&i8253_channel[1].timer, i8253_fire, &i8253_channel[1]);
+	event_base_set(global_evbase, &i8253_channel[1].timer);
+
 	evtimer_set(&i8253_channel[2].timer, i8253_fire, &i8253_channel[2]);
+	event_base_set(global_evbase, &i8253_channel[2].timer);
+
+	evtimer_set(&i8253_channel[0].reset, i8253_delayed_reset, &i8253_channel[0]);
+	event_base_set(global_evbase, &i8253_channel[0].reset);
+
+	evtimer_set(&i8253_channel[1].reset, i8253_delayed_reset, &i8253_channel[1]);
+	event_base_set(global_evbase, &i8253_channel[1].reset);
+
+	evtimer_set(&i8253_channel[2].reset, i8253_delayed_reset, &i8253_channel[2]);
+	event_base_set(global_evbase, &i8253_channel[2].reset);
+
+	vm_pipe(&dev_pipe, sizeof(uint8_t), i8253_pipe_dispatch);
+	event_base_set(global_evbase, &dev_pipe.read_ev);
+	event_add(&dev_pipe.read_ev, NULL);
 }
 
 /*
@@ -271,7 +320,7 @@ vcpu_exit_i8253(struct vm_run_params *vr
 				    sel, i8253_channel[sel].mode,
 				    i8253_channel[sel].start);
 
-				i8253_reset(sel);
+				i8253_blocking_reset(sel);
 			}
 		} else {
 			if (i8253_channel[sel].rbs) {
@@ -304,21 +353,34 @@ ret:
  * Resets the i8253's counter timer
  *
  * Parameters:
- *  chn: counter ID. Only channel ID 0 is presently emulated.
+ *  chn: pointer to i8253_channel struct to reset
  */
 void
-i8253_reset(uint8_t chn)
+i8253_reset(struct i8253_channel *chn)
 {
 	struct timeval tv;
 
-	evtimer_del(&i8253_channel[chn].timer);
+	if (evtimer_pending(&chn->timer, NULL))
+	    evtimer_del(&chn->timer);
 	timerclear(&tv);
 
-	i8253_channel[chn].in_use = 1;
-	i8253_channel[chn].state = 0;
-	tv.tv_usec = (i8253_channel[chn].start * NS_PER_TICK) / 1000;
-	clock_gettime(CLOCK_MONOTONIC, &i8253_channel[chn].ts);
-	evtimer_add(&i8253_channel[chn].timer, &tv);
+	chn->in_use = 1;
+	chn->state = 0;
+	tv.tv_usec = (chn->start * NS_PER_TICK) / 1000;
+	clock_gettime(CLOCK_MONOTONIC, &chn->ts);
+
+	evtimer_add(&chn->timer, &tv);
+}
+
+void
+i8253_blocking_reset(uint8_t chn)
+{
+	struct timeval tv;
+	timerclear(&tv);
+	tv.tv_sec = 5;
+
+	/* i8253 resets happen very frequently and can easily block pausing */
+	vm_pipe_send_timeout(&dev_pipe, &chn, &tv);
 }
 
 /*
@@ -377,7 +439,9 @@ i8253_restore(int fd, uint32_t vm_id)
 		i8253_channel[i].vm_id = vm_id;
 		evtimer_set(&i8253_channel[i].timer, i8253_fire,
 		    &i8253_channel[i]);
-		i8253_reset(i);
+		event_base_set(global_evbase, &i8253_channel[i].timer);
+
+		i8253_reset(&i8253_channel[i]);
 	}
 	return (0);
 }
@@ -385,16 +449,33 @@ i8253_restore(int fd, uint32_t vm_id)
 void
 i8253_stop()
 {
-	int i;
-	for (i = 0; i < 3; i++)
-		evtimer_del(&i8253_channel[i].timer);
+	evtimer_del(&i8253_channel[0].timer);
+	evtimer_del(&i8253_channel[1].timer);
+	evtimer_del(&i8253_channel[2].timer);
+}
+
+static void
+i8253_delayed_reset(int fd, short type, void *arg)
+{
+	struct i8253_channel *chn = arg;
+	log_debug("%s: delayed reset of i8253 channel", __func__);
+	i8253_reset(chn);
 }
 
 void
 i8253_start()
 {
 	int i;
+	struct timeval tv;
+
 	for (i = 0; i < 3; i++)
-		if (i8253_channel[i].in_use)
-			i8253_reset(i);
+		if (i8253_channel[i].in_use) {
+			if (i8253_channel[i].mode != TIMER_INTTC) {
+				timerclear(&tv);
+				tv.tv_usec = 10000;
+				evtimer_add(&i8253_channel[i].reset, &tv);
+			} else {
+				i8253_reset(&i8253_channel[i]);
+			}
+		}
 }
Index: i8253.h
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/i8253.h,v
retrieving revision 1.9
diff -u -p -u -p -r1.9 i8253.h
--- i8253.h	26 Apr 2018 17:10:10 -0000	1.9
+++ i8253.h	4 Jun 2020 20:21:27 -0000
@@ -38,13 +38,14 @@ struct i8253_channel {
 	uint8_t mode;		/* counter mode */
 	uint8_t rbs;		/* channel is in readback status mode */
 	struct event timer;	/* timer event for this counter */
+	struct event reset;	/* timer event for delayed reset */
 	uint32_t vm_id;		/* owning VM id */
 	int in_use;		/* denotes if this counter was ever used */
 	uint8_t state;		/* 0 if channel is counting, 1 if fired */
 };
 
 void i8253_init(uint32_t);
-void i8253_reset(uint8_t);
+void i8253_blocking_reset(uint8_t);
 void i8253_fire(int, short, void *);
 int i8253_dump(int);
 int i8253_restore(int, uint32_t);
Index: mc146818.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/mc146818.c,v
retrieving revision 1.21
diff -u -p -u -p -r1.21 mc146818.c
--- mc146818.c	30 Nov 2019 00:51:29 -0000	1.21
+++ mc146818.c	4 Jun 2020 20:21:27 -0000
@@ -50,6 +50,8 @@
 
 #define TOBCD(x)	(((x) / 10 * 16) + ((x) % 10))
 
+extern struct event_base *global_evbase;
+
 struct mc146818 {
 	time_t now;
 	uint8_t idx;
@@ -63,6 +65,32 @@ struct mc146818 {
 
 struct mc146818 rtc;
 
+static struct vm_dev_pipe dev_pipe;
+typedef char pipe_msg;
+
+void rtc_reschedule_per(void);
+
+/*
+ * mc146818_pipe_handler
+ *
+ * Drains the device pipe when called and reschedules the periodic
+ * timer safely.
+ */
+static void
+mc146818_pipe_dispatch(int fd, short event, void *arg)
+{
+	pipe_msg msg;
+
+	mutex_lock(&dev_pipe.mutex);
+
+	read(fd, &msg, sizeof(pipe_msg));
+	log_debug("%s: rescheduling periodic timer", __func__);
+	rtc_reschedule_per();
+
+	pthread_cond_signal(&dev_pipe.cond);
+	mutex_unlock(&dev_pipe.mutex);
+}
+
 /*
  * rtc_updateregs
  *
@@ -110,6 +138,7 @@ rtc_fire1(int fd, short type, void *arg)
 		    "resync", __func__, (rtc.now - old));
 		vmmci_ctl(VMMCI_SYNCRTC);
 	}
+
 	evtimer_add(&rtc.sec, &rtc.sec_tv);
 }
 
@@ -172,9 +201,15 @@ mc146818_init(uint32_t vm_id, uint64_t m
 	timerclear(&rtc.per_tv);
 
 	evtimer_set(&rtc.sec, rtc_fire1, NULL);
+	event_base_set(global_evbase, &rtc.sec);
 	evtimer_add(&rtc.sec, &rtc.sec_tv);
 
 	evtimer_set(&rtc.per, rtc_fireper, (void *)(intptr_t)rtc.vm_id);
+	event_base_set(global_evbase, &rtc.per);
+
+	vm_pipe(&dev_pipe, sizeof(char), mc146818_pipe_dispatch);
+	event_base_set(global_evbase, &dev_pipe.read_ev);
+	event_add(&dev_pipe.read_ev, NULL);
 }
 
 /*
@@ -183,7 +218,7 @@ mc146818_init(uint32_t vm_id, uint64_t m
  * Reschedule the periodic interrupt firing rate, based on the currently
  * selected REGB values.
  */
-static void
+void
 rtc_reschedule_per(void)
 {
 	uint16_t rate;
@@ -193,6 +228,7 @@ rtc_reschedule_per(void)
 		rate = 32768 >> ((rtc.regs[MC_REGA] & MC_RATE_MASK) - 1);
 		us = (1.0 / rate) * 1000000;
 		rtc.per_tv.tv_usec = us;
+
 		if (evtimer_pending(&rtc.per, NULL))
 			evtimer_del(&rtc.per);
 
@@ -200,6 +236,12 @@ rtc_reschedule_per(void)
 	}
 }
 
+static void
+rtc_blocking_reschedule_per(void)
+{
+	vm_pipe_send(&dev_pipe, NULL);
+}
+
 /*
  * rtc_update_rega
  *
@@ -217,7 +259,7 @@ rtc_update_rega(uint32_t data)
 
 	rtc.regs[MC_REGA] = data;
 	if ((rtc.regs[MC_REGA] ^ data) & 0x0f)
-		rtc_reschedule_per();
+		rtc_blocking_reschedule_per();
 }
 
 /*
@@ -240,7 +282,7 @@ rtc_update_regb(uint32_t data)
 	rtc.regs[MC_REGB] = data;
 
 	if (data & MC_REGB_PIE)
-		rtc_reschedule_per();
+		rtc_blocking_reschedule_per();
 }
 
 /*
@@ -341,7 +383,11 @@ mc146818_restore(int fd, uint32_t vm_id)
 	memset(&rtc.sec, 0, sizeof(struct event));
 	memset(&rtc.per, 0, sizeof(struct event));
 	evtimer_set(&rtc.sec, rtc_fire1, NULL);
+	event_base_set(global_evbase, &rtc.sec);
+
 	evtimer_set(&rtc.per, rtc_fireper, (void *)(intptr_t)rtc.vm_id);
+	event_base_set(global_evbase, &rtc.per);
+
 	return (0);
 }
 
Index: ns8250.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/ns8250.c,v
retrieving revision 1.25
diff -u -p -u -p -r1.25 ns8250.c
--- ns8250.c	11 Dec 2019 06:45:16 -0000	1.25
+++ ns8250.c	4 Jun 2020 20:21:27 -0000
@@ -37,9 +37,30 @@
 extern char *__progname;
 struct ns8250_dev com1_dev;
 
+extern struct event_base *global_evbase;
+
+static struct vm_dev_pipe dev_pipe;
+
 static void com_rcv_event(int, short, void *);
 static void com_rcv(struct ns8250_dev *, uint32_t, uint32_t);
 
+static void
+ns8250_pipe_dispatch(int fd, short event, void *arg)
+{
+	char msg;
+
+	mutex_lock(&dev_pipe.mutex);
+
+	read(fd, &msg, sizeof(msg));
+
+	event_del(&com1_dev.event);
+	event_add(&com1_dev.wake, NULL);
+
+	pthread_cond_signal(&dev_pipe.cond);
+	mutex_unlock(&dev_pipe.mutex);
+}
+
+
 /*
  * ratelimit
  *
@@ -54,11 +75,15 @@ static void com_rcv(struct ns8250_dev *,
 static void
 ratelimit(int fd, short type, void *arg)
 {
-	/* Set TXRDY and clear "no pending interrupt" */
+	mutex_lock(&com1_dev.mutex);
 	com1_dev.regs.iir |= IIR_TXRDY;
 	com1_dev.regs.iir &= ~IIR_NOPEND;
+	mutex_unlock(&com1_dev.mutex);
+
 	vcpu_assert_pic_irq(com1_dev.vmid, 0, com1_dev.irq);
 	vcpu_deassert_pic_irq(com1_dev.vmid, 0, com1_dev.irq);
+
+	evtimer_add(&com1_dev.rate, &com1_dev.rate_tv);
 }
 
 void
@@ -72,6 +97,7 @@ ns8250_init(int fd, uint32_t vmid)
 		errno = ret;
 		fatal("could not initialize com1 mutex");
 	}
+
 	com1_dev.fd = fd;
 	com1_dev.irq = 4;
 	com1_dev.portid = NS8250_COM1;
@@ -98,6 +124,7 @@ ns8250_init(int fd, uint32_t vmid)
 
 	event_set(&com1_dev.event, com1_dev.fd, EV_READ | EV_PERSIST,
 	    com_rcv_event, (void *)(intptr_t)vmid);
+	event_base_set(global_evbase, &com1_dev.event);
 
 	/*
 	 * Whenever fd is writable implies that the pty slave is connected.
@@ -106,12 +133,19 @@ ns8250_init(int fd, uint32_t vmid)
 	 */
 	event_set(&com1_dev.wake, com1_dev.fd, EV_WRITE,
 	    com_rcv_event, (void *)(intptr_t)vmid);
+	event_base_set(global_evbase, &com1_dev.wake);
 	event_add(&com1_dev.wake, NULL);
 
 	/* Rate limiter for simulating baud rate */
 	timerclear(&com1_dev.rate_tv);
 	com1_dev.rate_tv.tv_usec = 10000;
 	evtimer_set(&com1_dev.rate, ratelimit, NULL);
+	event_base_set(global_evbase, &com1_dev.rate);
+	evtimer_add(&com1_dev.rate, &com1_dev.rate_tv);
+
+	vm_pipe(&dev_pipe, sizeof(char), ns8250_pipe_dispatch);
+	event_base_set(global_evbase, &dev_pipe.read_ev);
+	event_add(&dev_pipe.read_ev, NULL);
 }
 
 static void
@@ -201,8 +235,21 @@ com_rcv(struct ns8250_dev *com, uint32_t
 		if (errno != EAGAIN)
 			log_warn("unexpected read error on com device");
 	} else if (sz == 0) {
-		event_del(&com->event);
-		event_add(&com->wake, NULL);
+		if (vcpu_id == 0) {
+			/*
+			 * We're being called from the event thread
+			 * so this is safe.
+			 */
+			event_del(&com->event);
+			event_add(&com->wake, NULL);
+		} else {
+			/*
+			 * We're being called from the vcpu thread
+			 * so we need to relay the request to
+			 * modify the event base.
+			 */
+			vm_pipe_send(&dev_pipe, NULL);
+		}
 		return;
 	} else if (sz != 1 && sz != 2)
 		log_warnx("unexpected read return value %zd on com device", sz);
@@ -255,12 +302,8 @@ vcpu_process_com_data(struct vm_exit *ve
 		com1_dev.byte_out++;
 
 		if (com1_dev.regs.ier & IER_ETXRDY) {
-			/* Limit output rate if needed */
-			if (com1_dev.pause_ct > 0 &&
-			    com1_dev.byte_out % com1_dev.pause_ct == 0) {
-					evtimer_add(&com1_dev.rate,
-					    &com1_dev.rate_tv);
-			} else {
+			if (!(com1_dev.pause_ct > 0 &&
+				com1_dev.byte_out % com1_dev.pause_ct == 0)) {
 				/* Set TXRDY and clear "no pending interrupt" */
 				com1_dev.regs.iir |= IIR_TXRDY;
 				com1_dev.regs.iir &= ~IIR_NOPEND;
@@ -654,15 +697,15 @@ ns8250_restore(int fd, int con_fd, uint3
 	com1_dev.byte_out = 0;
 	com1_dev.regs.divlo = 1;
 	com1_dev.baudrate = 115200;
-	com1_dev.rate_tv.tv_usec = 10000;
 	com1_dev.pause_ct = (com1_dev.baudrate / 8) / 1000 * 10;
-	evtimer_set(&com1_dev.rate, ratelimit, NULL);
 
 	event_set(&com1_dev.event, com1_dev.fd, EV_READ | EV_PERSIST,
 	    com_rcv_event, (void *)(intptr_t)vmid);
+	event_base_set(global_evbase, &com1_dev.event);
 
 	event_set(&com1_dev.wake, com1_dev.fd, EV_WRITE,
 	    com_rcv_event, (void *)(intptr_t)vmid);
+	event_base_set(global_evbase, &com1_dev.wake);
 
 	return (0);
 }
@@ -670,8 +713,8 @@ ns8250_restore(int fd, int con_fd, uint3
 void
 ns8250_stop()
 {
-	if(event_del(&com1_dev.event))
-		log_warn("could not delete ns8250 event handler");
+	event_del(&com1_dev.event);
+	event_del(&com1_dev.wake);
 	evtimer_del(&com1_dev.rate);
 }
 
Index: proc.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/proc.c,v
retrieving revision 1.18
diff -u -p -u -p -r1.18 proc.c
--- proc.c	10 Sep 2018 10:36:01 -0000	1.18
+++ proc.c	4 Jun 2020 20:21:27 -0000
@@ -35,6 +35,9 @@
 #include <imsg.h>
 
 #include "proc.h"
+#include "vmd.h"
+
+extern struct event_base *global_evbase;
 
 void	 proc_exec(struct privsep *, struct privsep_proc *, unsigned int, int,
 	    int, char **);
@@ -185,6 +188,7 @@ proc_connect(struct privsep *ps)
 			imsg_init(&iev->ibuf, ps->ps_pp->pp_pipes[dst][inst]);
 			event_set(&iev->ev, iev->ibuf.fd, iev->events,
 			    iev->handler, iev->data);
+			event_base_set(global_evbase, &iev->ev);
 			event_add(&iev->ev, NULL);
 		}
 	}
@@ -290,6 +294,7 @@ proc_accept(struct privsep *ps, int fd, 
 	iev = &ps->ps_ievs[dst][n];
 	imsg_init(&iev->ibuf, fd);
 	event_set(&iev->ev, iev->ibuf.fd, iev->events, iev->handler, iev->data);
+	event_base_set(global_evbase, &iev->ev);
 	event_add(&iev->ev, NULL);
 }
 
@@ -566,14 +571,20 @@ proc_run(struct privsep *ps, struct priv
 	    setresuid(pw->pw_uid, pw->pw_uid, pw->pw_uid))
 		fatal("%s: cannot drop privileges", __func__);
 
-	event_init();
+	global_evbase = event_base_new();
 
 	signal_set(&ps->ps_evsigint, SIGINT, proc_sig_handler, p);
+	event_base_set(global_evbase, &ps->ps_evsigint);
 	signal_set(&ps->ps_evsigterm, SIGTERM, proc_sig_handler, p);
+	event_base_set(global_evbase, &ps->ps_evsigterm);
 	signal_set(&ps->ps_evsigchld, SIGCHLD, proc_sig_handler, p);
+	event_base_set(global_evbase, &ps->ps_evsigchld);
 	signal_set(&ps->ps_evsighup, SIGHUP, proc_sig_handler, p);
+	event_base_set(global_evbase, &ps->ps_evsighup);
 	signal_set(&ps->ps_evsigpipe, SIGPIPE, proc_sig_handler, p);
+	event_base_set(global_evbase, &ps->ps_evsigpipe);
 	signal_set(&ps->ps_evsigusr1, SIGUSR1, proc_sig_handler, p);
+	event_base_set(global_evbase, &ps->ps_evsigusr1);
 
 	signal_add(&ps->ps_evsigint, NULL);
 	signal_add(&ps->ps_evsigterm, NULL);
@@ -599,7 +610,7 @@ proc_run(struct privsep *ps, struct priv
 	if (run != NULL)
 		run(ps, p, arg);
 
-	event_dispatch();
+	event_base_dispatch(global_evbase);
 
 	proc_shutdown(p);
 }
@@ -626,7 +637,7 @@ proc_dispatch(int fd, short event, void 
 		if (n == 0) {
 			/* this pipe is dead, so remove the event handler */
 			event_del(&iev->ev);
-			event_loopexit(NULL);
+			event_base_loopexit(global_evbase, NULL);
 			return;
 		}
 	}
@@ -637,7 +648,7 @@ proc_dispatch(int fd, short event, void 
 		if (n == 0) {
 			/* this pipe is dead, so remove the event handler */
 			event_del(&iev->ev);
-			event_loopexit(NULL);
+			event_base_loopexit(global_evbase, NULL);
 			return;
 		}
 	}
@@ -714,6 +725,7 @@ imsg_event_add(struct imsgev *iev)
 
 	event_del(&iev->ev);
 	event_set(&iev->ev, iev->ibuf.fd, iev->events, iev->handler, iev->data);
+	event_base_set(global_evbase, &iev->ev);
 	event_add(&iev->ev, NULL);
 }
 
Index: virtio.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/virtio.c,v
retrieving revision 1.82
diff -u -p -u -p -r1.82 virtio.c
--- virtio.c	11 Dec 2019 06:45:16 -0000	1.82
+++ virtio.c	4 Jun 2020 20:21:27 -0000
@@ -54,6 +54,8 @@ struct vionet_dev *vionet;
 struct vioscsi_dev *vioscsi;
 struct vmmci_dev vmmci;
 
+extern struct event_base *global_evbase;
+
 int nr_vionet;
 int nr_vioblk;
 
@@ -1627,6 +1629,7 @@ vmmci_ack(unsigned int cmd)
 			log_debug("%s: vm %u requested shutdown", __func__,
 			    vmmci.vm_id);
 			tv.tv_sec = VMMCI_TIMEOUT;
+
 			evtimer_add(&vmmci.timeout, &tv);
 			return;
 		}
@@ -1879,6 +1882,7 @@ virtio_init(struct vmd_vm *vm, int child
 
 			event_set(&vionet[i].event, vionet[i].fd,
 			    EV_READ | EV_PERSIST, vionet_rx_event, &vionet[i]);
+			event_base_set(global_evbase, &vionet[i].event);
 			if (event_add(&vionet[i].event, NULL)) {
 				log_warn("could not initialize vionet event "
 				    "handler");
@@ -2033,6 +2037,7 @@ virtio_init(struct vmd_vm *vm, int child
 	vmmci.pci_id = id;
 
 	evtimer_set(&vmmci.timeout, vmmci_timeout, NULL);
+	event_base_set(global_evbase, &vmmci.timeout);
 }
 
 void
@@ -2066,6 +2071,7 @@ vmmci_restore(int fd, uint32_t vm_id)
 	vmmci.irq = pci_get_dev_irq(vmmci.pci_id);
 	memset(&vmmci.timeout, 0, sizeof(struct event));
 	evtimer_set(&vmmci.timeout, vmmci_timeout, NULL);
+	event_base_set(global_evbase, &vmmci.timeout);
 	return (0);
 }
 
@@ -2140,6 +2146,7 @@ vionet_restore(int fd, struct vmd_vm *vm
 			memset(&vionet[i].event, 0, sizeof(struct event));
 			event_set(&vionet[i].event, vionet[i].fd,
 			    EV_READ | EV_PERSIST, vionet_rx_event, &vionet[i]);
+			event_base_set(global_evbase, &vionet[i].event);
 		}
 	}
 	return (0);
@@ -2342,7 +2349,7 @@ virtio_stop(struct vm_create_params *vcp
 		if (event_del(&vionet[i].event)) {
 			log_warn("could not initialize vionet event "
 			    "handler");
-			return;
+			break;
 		}
 	}
 }
@@ -2355,7 +2362,7 @@ virtio_start(struct vm_create_params *vc
 		if (event_add(&vionet[i].event, NULL)) {
 			log_warn("could not initialize vionet event "
 			    "handler");
-			return;
+			break;
 		}
 	}
 }
Index: vm.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/vm.c,v
retrieving revision 1.57
diff -u -p -u -p -r1.57 vm.c
--- vm.c	30 Apr 2020 03:50:53 -0000	1.57
+++ vm.c	4 Jun 2020 20:21:27 -0000
@@ -107,6 +107,8 @@ extern struct vmd *env;
 
 extern char *__progname;
 
+extern struct event_base *global_evbase;
+
 pthread_mutex_t threadmutex;
 pthread_cond_t threadcond;
 
@@ -364,8 +366,6 @@ start_vm(struct vmd_vm *vm, int fd)
 	for (i = 0; i < VMM_MAX_NICS_PER_VM; i++)
 		nicfds[i] = vm->vm_ifs[i].vif_fd;
 
-	event_init();
-
 	if (vm->vm_state & VM_STATE_RECEIVED) {
 		restore_emulated_hw(vcp, vm->vm_receive_fd, nicfds,
 		    vm->vm_disks, vm->vm_cdrom);
@@ -1063,6 +1063,7 @@ init_emulated_hw(struct vmop_create_para
 	/* Initialize virtio devices */
 	virtio_init(current_vm, child_cdrom, child_disks, child_taps);
 }
+
 /*
  * restore_emulated_hw
  *
@@ -1357,7 +1358,7 @@ event_thread(void *arg)
 	uint8_t *donep = arg;
 	intptr_t ret;
 
-	ret = event_dispatch();
+	ret = event_base_dispatch(global_evbase);
 
 	mutex_lock(&threadmutex);
 	*donep = 1;
@@ -2242,4 +2243,102 @@ translate_gva(struct vm_exit* exit, uint
 	log_debug("%s: final GPA for GVA 0x%llx = 0x%llx\n", __func__, va, *pa);
 
 	return (0);
+}
+
+/*
+ * vm_pipe
+ *
+ * Initialize a vm_dev_pipe, setting up its file descriptors, mutex,
+ * condition variable, and event structure.
+ *
+ * Does not set an event base or add the event. This must be done by
+ * the caller.
+ *
+ * Parameters:
+ *  p: pointer to vm_dev_pipe struct to initizlize
+ *  len: size of each message this pipe will support
+ *  cb: callback to use for READ events on the read end of the pipe
+ */
+void
+vm_pipe(struct vm_dev_pipe *p, size_t len, void (*cb)(int, short, void *))
+{
+	int ret;
+	int fds[2];
+
+	memset(p, 0, sizeof(struct vm_dev_pipe));
+	ret = pthread_mutex_init(&p->mutex, NULL);
+	if (ret) {
+		fatal("failed to create vm_dev_pipe mutex");
+	}
+
+	ret = pthread_cond_init(&p->cond, NULL);
+	if (ret) {
+		fatal("failed to create vm_dev_pipe condition variable");
+	}
+
+	ret = pipe(fds);
+	if (ret) {
+		fatal("failed to create vm_dev_pipe pipe");
+	}
+	p->read = fds[0];
+	p->write = fds[1];
+
+	if (len) {
+		p->msg_len = len;
+	} else {
+		p->msg_len = sizeof(char);
+	}
+
+	event_set(&p->read_ev, p->read, EV_READ | EV_PERSIST, cb, NULL);
+}
+
+/*
+ * vm_pipe_send
+ *
+ * Synchronously send a message to an emulated device vie the provided
+ * vm_dev_pipe. Currently only sends char-sized messages as only one
+ * emulated device (i8253) needs any specific message information (the
+ * channel number), so make sure readers pull 1 char off when reading.
+ *
+ * Parameters:
+ *  p: pointer to initialized vm_dev_pipe
+ *  msg: pointer to the message data to send down the pipe
+ */
+void
+vm_pipe_send(struct vm_dev_pipe *p, const void *msg)
+{
+	vm_pipe_send_timeout(p, msg, NULL);
+}
+
+void
+vm_pipe_send_timeout(struct vm_dev_pipe *p, const void *msg,
+    struct timeval *tv)
+{
+	int ret;
+	char dummy = 1;
+	struct timeval now;
+	struct timespec ts;
+
+	mutex_lock(&p->mutex);
+
+	if (msg) {
+		write(p->write, msg, p->msg_len);
+	} else {
+		write(p->write, &dummy, sizeof(dummy));
+	}
+
+	if (tv) {
+		gettimeofday(&now, NULL);
+		ts.tv_sec = now.tv_sec + tv->tv_sec;
+		ts.tv_nsec = (now.tv_usec + tv->tv_usec) * 1000UL;
+		ret = pthread_cond_timedwait(&p->cond, &p->mutex, &ts);
+	} else {
+		ret = pthread_cond_wait(&p->cond, &p->mutex);
+	}
+
+	if (ret) {
+		fatal("failed to wait on vm_dev_pipe's thread condition");
+	}
+
+	mutex_unlock(&p->mutex);
 }
Index: vmd.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/vmd.c,v
retrieving revision 1.117
diff -u -p -u -p -r1.117 vmd.c
--- vmd.c	12 Dec 2019 03:53:38 -0000	1.117
+++ vmd.c	4 Jun 2020 20:21:27 -0000
@@ -75,6 +75,7 @@ static struct privsep_proc procs[] = {
 	{ "vmm",	PROC_VMM,	vmd_dispatch_vmm, vmm, vmm_shutdown },
 };
 
+struct event_base *global_evbase;
 struct event staggered_start_timer;
 
 /* For the privileged process */
@@ -831,13 +832,18 @@ main(int argc, char **argv)
 	if (ps->ps_noaction == 0)
 		log_info("startup");
 
-	event_init();
+	global_evbase = event_base_new();
 
 	signal_set(&ps->ps_evsigint, SIGINT, vmd_sighdlr, ps);
+	event_base_set(global_evbase, &ps->ps_evsigint);
 	signal_set(&ps->ps_evsigterm, SIGTERM, vmd_sighdlr, ps);
+	event_base_set(global_evbase, &ps->ps_evsigterm);
 	signal_set(&ps->ps_evsighup, SIGHUP, vmd_sighdlr, ps);
+	event_base_set(global_evbase, &ps->ps_evsighup);
 	signal_set(&ps->ps_evsigpipe, SIGPIPE, vmd_sighdlr, ps);
+	event_base_set(global_evbase, &ps->ps_evsigpipe);
 	signal_set(&ps->ps_evsigusr1, SIGUSR1, vmd_sighdlr, ps);
+	event_base_set(global_evbase, &ps->ps_evsigusr1);
 
 	signal_add(&ps->ps_evsigint, NULL);
 	signal_add(&ps->ps_evsigterm, NULL);
@@ -851,7 +857,7 @@ main(int argc, char **argv)
 	if (vmd_configure() == -1)
 		fatalx("configuration failed");
 
-	event_dispatch();
+	event_base_dispatch(global_evbase);
 
 	log_debug("parent exiting");
 
@@ -951,6 +957,8 @@ vmd_configure(void)
 
 	log_debug("%s: starting vms in staggered fashion", __func__);
 	evtimer_set(&staggered_start_timer, start_vm_batch, NULL);
+	event_base_set(global_evbase, &staggered_start_timer);
+
 	/* start first batch */
 	start_vm_batch(0, 0, NULL);
 
@@ -1021,6 +1029,8 @@ vmd_reload(unsigned int reset, const cha
 
 		log_debug("%s: starting vms in staggered fashion", __func__);
 		evtimer_set(&staggered_start_timer, start_vm_batch, NULL);
+		event_base_set(global_evbase, &staggered_start_timer);
+
 		/* start first batch */
 		start_vm_batch(0, 0, NULL);
 
Index: vmd.h
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/vmd.h,v
retrieving revision 1.98
diff -u -p -u -p -r1.98 vmd.h
--- vmd.h	12 Dec 2019 03:53:38 -0000	1.98
+++ vmd.h	4 Jun 2020 20:21:27 -0000
@@ -354,6 +354,15 @@ struct vmd {
 	int			 vmd_ptmfd;
 };
 
+struct vm_dev_pipe {
+	int			 read;
+	int			 write;
+	size_t			 msg_len;
+	struct event		 read_ev;
+	pthread_mutex_t		 mutex;
+	pthread_cond_t		 cond;
+};
+
 static inline struct sockaddr_in *
 ss2sin(struct sockaddr_storage *ss)
 {
@@ -442,6 +451,10 @@ int	 vmm_pipe(struct vmd_vm *, int, void
 /* vm.c */
 int	 start_vm(struct vmd_vm *, int);
 __dead void vm_shutdown(unsigned int);
+void	 vm_pipe(struct vm_dev_pipe *, size_t, void (*)(int, short, void *));
+void	 vm_pipe_send(struct vm_dev_pipe *, const void *);
+void	 vm_pipe_send_timeout(struct vm_dev_pipe *, const void *,
+            struct timeval *);
 
 /* control.c */
 int	 config_init(struct vmd *);
Index: vmm.c
===================================================================
RCS file: /cvs/src/usr.sbin/vmd/vmm.c,v
retrieving revision 1.96
diff -u -p -u -p -r1.96 vmm.c
--- vmm.c	30 Apr 2020 03:50:53 -0000	1.96
+++ vmm.c	4 Jun 2020 20:21:27 -0000
@@ -64,6 +64,8 @@ int opentap(char *);
 
 extern struct vmd *env;
 
+extern struct event_base *global_evbase;
+
 static struct privsep_proc procs[] = {
 	{ "parent",	PROC_PARENT,	vmm_dispatch_parent  },
 };
@@ -82,6 +84,7 @@ vmm_run(struct privsep *ps, struct privs
 
 	signal_del(&ps->ps_evsigchld);
 	signal_set(&ps->ps_evsigchld, SIGCHLD, vmm_sighdlr, ps);
+	event_base_set(global_evbase, &ps->ps_evsigchld);
 	signal_add(&ps->ps_evsigchld, NULL);
 
 	/*
@@ -198,7 +201,7 @@ vmm_dispatch_parent(int fd, struct privs
 				/*
 				 * Request reboot but mark the VM as shutting
 				 * down. This way we can terminate the VM after
-				 * the triple fault instead of reboot and 
+				 * the triple fault instead of reboot and
 				 * avoid being stuck in the ACPI-less powerdown
 				 * ("press any key to reboot") of the VM.
 				 */
@@ -709,6 +712,9 @@ vmm_start_vm(struct imsg *imsg, uint32_t
 		/* Child */
 		close(fds[0]);
 		close(PROC_PARENT_SOCK_FILENO);
+
+		event_base_free(global_evbase);
+		global_evbase = event_base_new();
 
 		ret = start_vm(vm, fds[1]);
 
